#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define HASH_CAPACITY 15

// Singly Linked-list implementation
// therefore chaining
typedef struct _bucket bucket;
struct _bucket { 
    const char *key, *value;
    bucket* entry;
};

typedef struct _Hash Hash;
struct _Hash {
    bucket arr[HASH_CAPACITY];
};

Hash* hash_new(void) { 
    Hash* hash = malloc(sizeof(Hash));
    *hash = (Hash) { 
        .arr = { 0 }
    };
    return hash;
}

unsigned hash_function(Hash* hash, const char* key) {
    // h`(x) = [h(x) + f(i)] % HASH_CAPACITY
    // f(x)  = i = 0^2, 1^2, 2^2, 3^2 .....
    // h(x)  = sum of each char of key
    unsigned sum = 0;
    for (size_t i = 0; i < strlen(key); i++) {
        sum  = key[i] + (i * i);
    }
    unsigned index = sum % HASH_CAPACITY;
    return index;
}
void hash_insert(Hash* hash, const char* key, const char* val) {
    unsigned index = hash_function(hash, key);
    // If there is an existing key/value, append new key/value to the list
    if (hash->arr[index].key) {

        bucket* temp = &(hash->arr[index]);
        while (temp->entry != NULL) {
            temp = temp->entry;
        }

        bucket* new_bucket = malloc(sizeof(bucket));
        *new_bucket = (bucket) {
            .key = key,
            .value = val
        };
        temp->entry = new_bucket;

    } else {
        hash->arr[index] = (bucket) {
            .key = key,
            .value = val 
        };
    }
}
const char* hash_search(Hash* hash, const char* key) {
    unsigned index = hash_function(hash, key);
    bucket* temp = &(hash->arr[index]);
    while (temp) {
        if (temp->key == key)
            return temp->value;
        temp = temp->entry;
    }
    return "Key not found.";
}
static void hash_delete_front(bucket* buc) {
    if (buc->entry != NULL) 
        *buc = (bucket) { 0 };
    buc = buc->entry;
}
static void hash_delete_back(bucket* buc) {
    *buc = (bucket) { 0 };   
}
void hash_delete(Hash* hash, const char* key) { 
    unsigned index = hash_function(hash, key);
    bucket* temp = &(hash->arr[index]);
    bucket* prev = NULL;
    while (temp) {
        if (temp->key == key) 
        {   
            if (hash->arr[index].entry != NULL)
            {
                hash_delete_front(temp);
            }
            else if (temp->entry == NULL)
            {
                hash_delete_back(temp);
            }
            else 
            {
                prev->entry = temp->entry;
                free(temp);
            }
        }
        temp = temp->entry;
        prev = temp;
    }
}
void hash_dump(Hash* hash) {    
    bucket* temp;
    for (int i = 0; i < HASH_CAPACITY; i++) {
        temp = &(hash->arr[i]);
        if (temp->key) {
            while (temp) {
                printf("%d: ", i); 
                printf("{Key: \"%s\" Value: \"%s\"}\t", temp->key, temp->value);
                temp = temp->entry;
            }
            printf("\n");
        }
    }
}

int main() { 

    Hash* hash = hash_new();
    hash_insert(hash, "pyro", "alissa");
    hash_insert(hash, "toilet", "jon");
    hash_insert(hash, "keyboard", "allah");
    hash_insert(hash, "helmet", "bob");
    hash_insert(hash, "asshole", "franklin");
    hash_insert(hash, "dinosaur", "lily");
    hash_insert(hash, "cat", "kitty");
    hash_insert(hash, "metropolis", "chlorophyll");
    hash_insert(hash, "zoo", "screw");
    hash_insert(hash, "palezoic", "how did you do this?");
    hash_insert(hash, "pedantic", "eliza");
    hash_insert(hash, "c2x", "gong");
    hash_insert(hash, "custom", "zao madong");
    hash_insert(hash, "nihao", "xi jin ping");
    hash_insert(hash, "god", "buddha");

    hash_delete(hash, "pyro");
    hash_delete(hash, "toilet");
    hash_delete(hash, "keyboard");
    hash_delete(hash, "helmet");
    hash_delete(hash, "asshole");
    hash_delete(hash, "dinosaur");
    hash_delete(hash, "cat");
    hash_delete(hash, "metropolis");
    hash_delete(hash, "zoo");
    hash_delete(hash, "palezoic");
    hash_delete(hash, "pedantic");
    hash_delete(hash, "c2x");
    hash_delete(hash, "custom");
    hash_delete(hash, "nihao");
    // hash_delete(hash, "god");

    hash_dump(hash);
    printf("%s\n", hash_search(hash, "god"));
    return 0;
}